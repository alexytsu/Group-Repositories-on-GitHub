{"version":3,"sources":["components/Repository/RepositoryLine.js","components/CategoryGrouping/CategoryGrouping.js","api/repositories.js","App.js","serviceWorker.js","index.js"],"names":["RepositoryLine","props","repo","react_default","a","createElement","className","href","html_url","name","description","CategoryGrouping","category_rows","console","log","repos","i","length","push","getUserRepositories","_x","_getUserRepositories","apply","this","arguments","_callee","username","response","data","regenerator_default","wrap","_context","prev","next","fetch","concat","headers","Accept","sent","json","abrupt","stop","_","require","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","categories","topics","filter","topic","startsWith","map","t","substr","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","value","tag","getValidCategories","groupBy","setState","rendered_categories","category_name","CategoryGrouping_CategoryGrouping","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb38c103.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Repository.css\";\n\nexport default function RepositoryLine(props) {\n  const repo = props.repo;\n\n  return (\n    <div className=\"repository_row\">\n      <div className=\"repository_name\">\n        <a href={repo.html_url}> {repo.name}</a>\n      </div>\n      <div className=\"repository_description\">\n        <a href={repo.html_url}>{repo.description}</a>\n      </div>\n      <div className=\"repository_link\">\n        <a href={repo.html_url}>Link</a>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport RepositoryLine from \"../Repository/RepositoryLine\";\nimport \"./CategoryGrouping.css\"\n\nexport default function CategoryGrouping(props) {\n  var category_rows = [];\n  console.log(\"Props.repos\", props.repos);\n  for (let i = 0; i < props.repos.length; i++) {\n    var repo = props.repos[i];\n    category_rows.push(<RepositoryLine repo={repo} />);\n  }\n\n  return (\n    <div className=\"card\">\n      <h2># {props.name}</h2>\n      {category_rows}\n    </div>\n  );\n}\n","export async function getUserRepositories(username) {\n  let response = await fetch(`https://api.github.com/users/${username}/repos`, {\n    headers: {\n      Accept: \"application/vnd.github.mercy-preview+json\"\n    }\n  });\n  let data = await response.json();\n  return  data;\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CategoryGrouping from \"./components/CategoryGrouping/CategoryGrouping\";\nimport { getUserRepositories } from \"./api/repositories\";\n\nvar _ = require(\"lodash\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      categories: null\n    };\n  }\n\n  /* \n    return all the GitHub topics that are being used as tags\n    topics that are tags are formatted: cat-{tag}\n  */\n  getValidCategories(topics) {\n    var tag = topics.filter(topic => topic.startsWith(\"cat-\"));\n    return tag.map(t => t.substr(4));\n  }\n\n  async componentDidMount() {\n    // get a list of every repositories for the current user\n    const data = await getUserRepositories(\"alexytsu\");\n    for (let repo of data) {\n      repo.tag = this.getValidCategories(repo.topics);\n    }\n\n    // group by tag\n    const categories = _.groupBy(data, repo => repo.tag);\n\n    this.setState({ data });\n    this.setState({ categories });\n  }\n\n  render() {\n    const categories = this.state.categories;\n    var rendered_categories = [];\n    for (let category_name in categories) {\n      var repos = categories[category_name];\n      rendered_categories.push(\n        <CategoryGrouping name={category_name} repos={repos} />\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Group Repos on GitHub</h1>\n        </div>\n        <div className=\"skinny\">\n          <div className=\"intro\">\n            <p>\n              GitHub doesn't support grouping of repositories but I like to keep\n              things organised. Uses data pulled from the GitHub API. Repos are\n              \"categorised\" by adding a <em>tag</em> on GitHub in the format\n              \"cat-\n              <em>category</em>\"\n            </p>\n          </div>\n          {rendered_categories}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}